<!DOCTYPE html>
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css">
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap-theme.min.css">

        <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"></script>
        <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/js/bootstrap.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.7.0/underscore-min.js"></script>

        <script>
            // http://www.davidjuth.com/rest-demo-jquery-rss.aspx
            $( function()
            {
                $("#feedContainer").empty();

                $.get("feed.rss", function(data) {                           
                    
                    $('#newsContainer').append("<ul>");
                    $(data).find('item').slice(0, 4).each(function() {  
                        var $item = $(this);  
                        var title = $item.find('title').text();  
                        var link = $item.find('link').text();  
            
                        var html = "<a href=\"" + link + "\"><li>" + title + "</a></li>";  
            
                        $('#newsContainer').append(html);  
                    });
                    $('#newsContainer').append("</ul>");
                });
            });
        </script>

        <script>
            function setPlayerCaptions(data) {
                    n = 12; // is there a nicer way to hardcode this?
                    // Preconditions:
                    // We only want candidates with full info (some entries lack xl/race/background/location, so test for xl)
                    // Check they have a species -- player might be on start screen
                    // And we need a watch url
                    candidates = data.filter(function(element) { return "XL" in element && element["species"] != '' && "watchurl" in element});
                    // There are a two competing goals with the candidate selection:
                    // * random each refresh
                    // * picks the best candidates
                    // To balance this, partition the candidate list into good, ok & bad groups, and select from each in turn as required
                    // Good: has spectators
                    // OK: idle < 5 secs
                    // Bad: everything else
                    good_candidates = []
                    ok_candidates = []
                    bad_candidates = []
                    _.each(candidates, function(c) {
                        if (c['viewers'] > 0) {
                            good_candidates.push(c);
                        } else if (c['idle'] < 5) {
                            ok_candidates.push(c);
                        } else {
                            bad_candidates.push(c);
                        }
                        });
                    selected_candidates = _.sample(good_candidates, n);
                    if (selected_candidates.length < n) {
                        n = n - selected_candidates.length;
                        selected_candidates = selected_candidates.concat(_.sample(ok_candidates, n));
                        if (selected_candidates.length < n) {
                            n = n - selected_candidates.length;
                            selected_candidates = selected_candidates.concat(_.sample(bad_candidates, n));
                         }
                    }
                    // Note that we might not have enough candidates at this point
                    if (selected_candidates.length <  $( "#tiles div" ).length) {
                        console.log("Warning: only found " + selected_candidates.length + " candidates.");
                    }
                    selected_candidates = _.shuffle(selected_candidates);

                    // Create & write our tiles
                    for (var i = 0; i < selected_candidates.length; i++) {
                        c = selected_candidates[i];
                        e = $( "<div>" );
                        e.css("background-image", "url('splashimgs/dcss-splash-" + i + ".png')");
                        e.css("background-position", "center center");
                        e.css("border-radius", "5px");
                        e.css("color", "white");
                        e.append("<p class=\"lead\">" + c["name"] + " the " + c["latest_milestone"]["title"] +"</p>");
                        info = "<p>" + "Level " + c["XL"] + " " + c["species"] + " " + c["background"];
                        if (c["latest_milestone"]["god"]) {
                            info += " of " + c["latest_milestone"]["god"]
                        }
                        info += " " + c["location"] + "</p>";
                        e.append(info);
                        e.append(getFlavourLine(c));
                        e.append("<p><a href=\"" + c["watchurl"] + "\">Watch Now</a></p>");

                        outer = $( "<div>" );
                        // Try to make the columnating sensible, and show only 4 tiles for smaller devices
                        outer.addClass("col-lg-3 col-md-4 col-sm-6 text-center");
                        if (i >= 4) {
                            outer.addClass("hidden-xs hidden-sm");
                        }
                        if (i >= 9) {
                            outer.addClass("hidden-md");
                        }
                        outer.append(e);
                        $( "#tiles" ).append(outer);
                    }

                    // Shuffle the tiles. This randomises the image ordering
                    // http://jsfiddle.net/C6LPY/2/
                    var parent = $("#tiles");
                    var divs = parent.children();
                    while (divs.length) {
                        parent.append(divs.splice(Math.floor(Math.random() * divs.length), 1)[0]);
                    }

                    $( "#dcss-online-link" ).text("See all " + candidates.length + " online games...");
            }
            function getFlavourLine(game) {
                // This function is given a dgl-status game and returns an interesting string about it.
                // We do this by generating every line and returning a random one.
                // This is sort of inefficient -- is there a smarter way?
                // Some lines are more interesting than others. We divide the candidate pool into two tiers
                // and preferentially draw only from the top tier if there are 2+ candidates
                m = game["latest_milestone"];
                candidates = [];
                // This is a good candidate, so put it in both tiers. Strip trailing '.'
                candidates.push("Just " + m['milestone'].slice(0, -1));
                if (m['zigdeepest'] > 0) {
                    candidates.push("Reached level " + m['zigdeepest'] + " of a Ziggurat");
                }
                if (m['zigscompleted'] > 0) {
                    candidates.push("Completed " + m['zigscompleted'] + " Ziggurats");
                }
                if ((m['mhp'] * 2) <  m['hp']) {
                    candidates.push("HP: " + m['hp'] + '/' + m['mhp'] + ' MP: ' + m['mp'] + '/' + m['mmp']);
                }
                if (m['status'].split(",").length > 2) {
                    candidates.push("Status Effects: " + m['status'].split(",").join(", "));
                }
                if (m['nrune'] > 1) {
                    candidates.push("Collected " + m['nrune'] + " runes");
                }
                if (m['banisher']) {
                    candidates.push("Banished to the Abyss by " + m['banisher']);
                }
                // These are the boring always-applicable status lines, so only use them if neccessary
                if (candidates.length <= 2) {
                    candidates.push("Just " + m['milestone'].slice(0, -1));
                    //candidates.push("Str: " + m['str'] + " Int: " + m['int'] + " Dex: " + m['dex']);
                    //candidates.push("Armour: " + m['ac'] + " Evasion: " + m['ev'] + " Shield: " + m['sh']);
                    //candidates.push("Found " + m['gold'] + " gold");
                    //candidates.push("Time played: " + m['dur']);
                    //candidates.push("On turn " + m['turn']);
                    if (m['goldspent'] > 0) {
                        //candidates.push("Spent " + m['gold'] + " gold");
                    }
                    if (m['potionsused'] > 0 && m['scrollsused'] > 0) {
                        //candidates.push("Quaffed " + m['potionsused'] + " potions and read " + m['scrollsused'] + " scrolls");
                    }
                    if (m['sk']) {
                        candidates.push("Highest skill: " + m['sk']);
                    }
                    if (m['god']) {
                        //candidates.push("Worshipping " + m['god']);
                    }
                }
                return _.sample(candidates, 1);
            }
            $( $.get("dgl-status.json", setPlayerCaptions ));
        </script>
    </head>
    <body>
        <div class="container">
            <div class="page-header">
                <center>
                    <a href="index.htm"><img class="img-responsive" src="logo.png" title="Dungeon Crawl Stone Soup" width="790px" height="152px"></a>
                </center>
            </div>

            <!-- mention free/open-source? -->
            <p class="lead text-center">A roguelike adventure through dungeons filled with dangerous monsters in a quest to find the mystifyingly fabulous Orb of Zot. <a href="about.htm">Read more...</a></p>
            <center> <!-- XXX: HACKY!!!!! -->
                <a href="play.htm" class="btn btn-lg btn-success" role="button">Play Online Now!</a>
                <br><br>
                <p class="text-center">Or download for: <a href="download.htm#windows">Windows</a>, <a href="download.htm#osx">OS X</a>, <a href="download.htm#android">Android</a>, <a href="download.htm#linux">Linux</a>.</p>
            </center>

            <h2 class="text-center">Live games</h2>
            <div class="row" id="tiles"></div>
            <a href="watch.htm"><p id="dcss-online-link">See all games...</p></a>

            <h2>Latest News</h2>
            <div class="container" id="newsContainer"></div>
            <p><a href="http://crawl.develz.org/wordpress/blog">All news...</a></p>

            <h2>Help & Community</h2>
            <ul>
                <li><a href="about.htm">About</a>: Learn more about DCSS.</li>
                <li><a href="http://crawl.chaosforge.org/">Community Wiki</a>: Up-to-date information on game items &amp; concepts.</li>
                <li><a href="https://crawl.develz.org/tavern/">Forum</a>: "Debate" strategy and changes on our forums.</a></li>
                <li><a href="http://webchat.freenode.net/?channels=%23%23crawl">IRC</a>: ##crawl on Freenode is filled with helpful (and otherwise) souls offering real-time advice.</li>
                <li><a href="https://crawl.develz.org/mantis/">Bug Reports</a>: Found a problem? Let us know!</li>
            </ul>

            <hr>
            <p class="small text-right">You are too berserk!</p>

        </div>
    </body>
</html>
